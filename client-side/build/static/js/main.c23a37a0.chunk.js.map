{"version":3,"sources":["components/Predictor.js","components/Charts.js","components/Experiment.js","App.js","index.js"],"names":["tmImage","require","Predictor","useState","userImg","setUserImg","Benign","Malignant","prediction","setPrediction","loading","setLoading","benignNum","useSpring","number","Math","round","Number","EPSILON","from","malignantNum","getPrediction","img","a","tmURL","load","model","maxPredictions","getTotalClasses","htmlIMG","document","createElement","src","predictTopK","then","data","predictions","className","probability","console","log","class","Button","onClick","getElementById","click","secondary","primary","type","id","name","accept","onChange","e","file","indexOf","reader","FileReader","addEventListener","event","target","result","readAsDataURL","readImage","files","Image","size","wrapped","Segment","Dimmer","active","Loader","indeterminate","Grid","columns","relaxed","Column","Statistic","label","value","div","style","fontSize","fontWeight","fontFamily","Divider","vertical","DeathStatsLineGraph","chartRef","React","createRef","setData","fetchData","fetch","res","json","deathData","useEffect","ctx","current","getContext","Chart","labels","map","column","Year","replace","datasets","parseInt","DeathCount","backgroundColor","pointRadius","pointHitRadius","options","animation","duration","easing","title","display","text","legend","scales","yAxes","labelString","xAxes","width","ref","SurvivalStatsLineGraph","survivalChartRef","survivalData","Race","ticks","suggestedMin","Experiment","imagePredictions","setImagePredictions","getPredictions","experimentResults","flexWrap","justifyContent","Card","margin","Reveal","animated","instant","Content","visible","image","boxShadow","filter","height","hidden","Header","actual","Description","extra","correct","Icon","App","Navbar","bg","variant","Brand","href","as","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c23a37a0.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport {useSpring, animated} from 'react-spring'\nimport { Button, Divider, Grid, Image, Segment, Statistic, Dimmer, Loader } from 'semantic-ui-react'\nimport '../styles.css'\n\n\nconst tf = require('@tensorflow/tfjs')\nconst tmImage = require('@teachablemachine/image')\n\n\n\nconst Predictor = () => {\n  const [userImg, setUserImg] = useState('')\n  const [prediction, setPrediction] = useState({Benign: 0, Malignant: 0})\n  const [loading, setLoading] = useState(false)\n  const benignNum = useSpring({ number: Math.round((prediction['Benign'] + Number.EPSILON) * 100) , from: { number: 0 } })\n  \n  const malignantNum = useSpring({ number: Math.round((prediction['Malignant'] + Number.EPSILON) * 100), from: { number: 0 } })\n\n  \n  const readImage = (file) => {\n    if(!file) return ''\n    if (file.type && file.type.indexOf('image') === -1) {\n        console.log('File is not an image.', file.type, file)\n        return ''\n    }\n    const reader = new FileReader()\n    reader.addEventListener('load', (event) => {\n    setUserImg(event.target.result)\n    })\n    console.log(file)\n    reader.readAsDataURL(file)\n  }\n  \n  const getPrediction = async (img) => {\n    setLoading(true)\n    const tmURL = 'https://teachablemachine.withgoogle.com/models/yFK1MCn9u/'\n    const modelURL = tmURL + 'model.json'\n    const metadataURL = tmURL + 'metadata.json'\n    const model = await tmImage.load(modelURL, metadataURL)\n    const maxPredictions = model.getTotalClasses()\n    const htmlIMG = document.createElement('img')\n    htmlIMG.src = img\n    model.predictTopK(htmlIMG, maxPredictions, false).then((data) => {\n        let predictions = {}\n        for(let prediction of data){\n            predictions[prediction.className] = prediction.probability\n        }\n        console.log(predictions)\n       setPrediction(predictions)\n       setLoading(false)\n    })\n  }\n\n  return (\n    <div class='prediction-section'>\n      <div class=\"upload-btn-wrapper\">\n        <Button \n        onClick={() => document.getElementById('userImg').click()}\n        secondary>Upload a photo</Button>\n        <Button onClick={() => getPrediction(userImg)} primary>Process</Button>\n        <input \n        type=\"file\" \n        id=\"userImg\" \n        name=\"userImg\" \n        accept=\"image/*\"\n        onChange={(e) => {\n            readImage(e.target.files[0])\n            setUserImg(e.target.files[0])\n          }}\n        ></input>\n        <Image src={userImg} size='small' wrapped />\n      </div>\n      \n      <Segment>\n        {loading && <Dimmer active>\n          <Loader indeterminate>Running Analysis</Loader>\n        </Dimmer>}\n        <Grid columns={2} relaxed='very'>\n          <Grid.Column>\n          <h1>Benign</h1>\n          <Statistic label='Percent Chance' value={<animated.div style={{fontSize:'40px', fontWeight:'bold', fontFamily:'monospace'}}>{benignNum.number}</animated.div>}/>\n          <p>Accuracy: 81%</p>\n          </Grid.Column>\n          <Grid.Column>\n          <h1>Malignant</h1>\n          <Statistic label='Percent Chance' value={<animated.div style={{fontSize:'40px', fontWeight:'bold', fontFamily:'monospace'}}>{malignantNum.number}</animated.div>}/>\n          <p>Accuracy: 84%</p>\n          </Grid.Column>\n        </Grid>\n\n        <Divider vertical></Divider>\n      </Segment>\n    </div>\n  )\n}\n\nexport default Predictor","import React, { Component, useEffect, useState } from 'react'\nimport Chart from \"chart.js\"\n\n\nexport function DeathStatsLineGraph(){\n    const chartRef = React.createRef()\n    const [data, setData] = useState(null)\n   \n    const fetchData = async () => {\n        const deathData = await fetch('/api/melanoma-death-data').then(res => res.json())\n        setData(deathData)\n    }\n    useEffect(() => {\n        fetchData()\n    }, [])\n\n    useEffect(() => {\n        if(data){\n            const ctx = chartRef.current.getContext(\"2d\")\n            new Chart(ctx, {\n                type: \"line\",\n                data: {\n                    labels: data.data.map((column) => column.Year.replace(/['\"]+/g, '')),\n                    datasets: [\n                        {\n                            label: \"Melanoma Deaths\",\n                            data: data.data.map((column) => parseInt(column.DeathCount.replace(/['\"]+/g, ''))),\n                            backgroundColor: 'rgba(250, 85, 85, 0.3)',\n                            pointRadius: 5,\n                            pointHitRadius: 5,\n\n                        }\n                    ]\n                },\n                options: {\n                    animation: {\n                        duration: 2000,\n                        easing: 'linear'\n                    },\n                    title: {\n                        display: true,\n                        text: 'Melanoma Deaths 1999-2017'\n                    },\n                    legend: {\n                        display: true\n                    },\n                    scales: {\n                        yAxes:{\n                            display: true,\n                            labelString: 'Death Count'\n                        },\n                        xAxes: {\n                            display: true,\n                            labelString: 'Year'\n                        }\n                    }\n                }\n            })\n        }\n    }, [data])\n    \n   \n    return (\n        <div style={{width: '40%'}}>\n            <canvas\n                id=\"myChart\"\n                ref={chartRef}\n            />\n        </div>\n    )\n}\n\nexport function SurvivalStatsLineGraph(){\n    const survivalChartRef = React.createRef()\n    const [data, setData] = useState(null)\n   \n    const fetchData = async () => {\n        const survivalData = await fetch('/api/melanoma-survival-data').then(res => res.json())\n        setData(survivalData)\n    }\n    useEffect(() => {\n        fetchData()\n    }, [])\n\n    useEffect(() => {\n        if(data){\n            const ctx = survivalChartRef.current.getContext(\"2d\")\n            new Chart(ctx, {\n                type: \"bar\",\n                data: {\n                    labels: data.data.map((column) => column.Race.replace(/['\"]+/g, '')),\n                    datasets: [\n                        {\n                            label: \"Melanoma 5 Year Survival Percentage\",\n                            data: data.data.map((column) => parseInt(column['5-yearRelativeSurvival%'].replace(/['\"]+/g, ''))),\n                            backgroundColor: 'rgba(255, 165, 0, 0.3)'\n                        }\n                    ]\n                },\n                options: {\n                    animation: {\n                        duration: 2000,\n                        easing: 'linear'\n                    },\n                    title: {\n                        display: true,\n                        text: 'Melanoma 5 Year Survival Rate Per Race'\n                    },\n                    scales: {\n                        yAxes: [{\n                            ticks: {\n                                suggestedMin: 50\n                            }\n                        }]\n                    }\n                }\n            })\n        }\n    }, [data])\n    \n   \n    return (\n        <div style={{width: '40%'}}>\n            <canvas\n                id=\"survivalChart\"\n                ref={survivalChartRef}\n            />\n        </div>\n    )\n}","import React, {useState, useEffect} from 'react'\nimport { Card, Icon, Dimmer, Loader, Image, Reveal } from 'semantic-ui-react'\n\nconst tf = require('@tensorflow/tfjs')\nconst tmImage = require('@teachablemachine/image')\n\nexport default function Experiment() {\n    const [loading, setLoading] = useState(0)\n\t\tconst [imagePredictions, setImagePredictions] = useState([])\n\t\n\n\t\t\n    const getPredictions = async () => {\n        setLoading(true)\n\t\t\t\tconst experimentResults = await fetch('/api/experiment-results').then(res => res.json())\n\t\t\t\tconsole.log(experimentResults)\n\t\t\t\tsetImagePredictions(experimentResults)\n        setLoading(false)\n      }\n\n      useEffect(() => {\n\t\t\t\tgetPredictions()\n      }, [])\n      \n    return (\n        <div>\n            {loading && <Dimmer active>\n            <Loader indeterminate>Running Analysis</Loader>\n            </Dimmer>}\n            <div style={{display: 'flex', flexWrap: 'wrap', justifyContent: 'center'}}>\n            {   imagePredictions &&\n                imagePredictions.map((data) => {\n                return (\n                    <Card style={{margin: '15px'}}>\n\t\t\t\t\t\t\t\t\t\t\t\t<Reveal animated='move' instant>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Reveal.Content visible>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Image src={data.image} style={{boxShadow: 'inset 0 0 2000px rgba(255, 255, 255, .5)', filter: 'blur(6px)', width: '300px', height:'250px'}} />\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Reveal.Content>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Reveal.Content hidden>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Image src={data.image} style={{width: '300px', height:'250px'}} />\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Reveal.Content>\n\t\t\t\t\t\t\t\t\t\t\t\t</Reveal>\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t<Card.Content>\n\t\t\t\t\t\t\t\t\t\t\t\t<Card.Header>Actual Status: {data.actual}</Card.Header>\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t<Card.Description>\n\t\t\t\t\t\t\t\t\t\t\t\t{`Benign: ${data.Benign}% Malignant: ${data.Malignant}%`}\n\t\t\t\t\t\t\t\t\t\t\t\t</Card.Description>\n\t\t\t\t\t\t\t\t\t\t\t\t</Card.Content>\n\t\t\t\t\t\t\t\t\t\t\t\t<Card.Content extra>\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tdata.correct ?\n\t\t\t\t\t\t\t\t\t\t\t\t\t<a>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Icon name='thumbs up outline' />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tPrediction Accurate\n\t\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\t\t<a>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Icon name='thumbs down' />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tPrediction Inaccurate\n\t\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t</Card.Content>\n\t\t\t\t\t\t\t\t\t\t</Card>\n                )\n            })\n            }\n            </div>\n            \n        </div>\n    )\n}\n\n","import React from 'react'\nimport './App.css'\nimport Predictor from './components/Predictor'\nimport Navbar from 'react-bootstrap/Navbar'\nimport {DeathStatsLineGraph, SurvivalStatsLineGraph} from './components/Charts'\nimport Experiment from './components/Experiment'\nimport { Header, Segment } from 'semantic-ui-react'\n\nfunction App() {\n  return (\n    <div>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\">\n          Skin Cancer Predictor\n        </Navbar.Brand>\n      </Navbar>\n      <Header as='h2'>\n        Using Machine Learning to Predict Melanoma\n      </Header>\n      <Header as='h4' >\n       Upload a photo below, of suspected melanoma on your skin to recieve a procedurally generated prediction of whether it's benign or malignant\n      </Header>\n      <div class=\"main\">\n        <Predictor />\n      </div>\n      <div className=\"d-flex\" style={{justifyContent: 'space-around'}}>\n      <DeathStatsLineGraph />\n      <SurvivalStatsLineGraph />\n     </div>\n     <Header as='h2'>\n        Predicting Melanoma On People Of Color\n      </Header>\n      <Header as='h4' >\n       20% accuracy on benign predictions and 80% accuracy on malignant predictions\n      </Header>\n     <Experiment />\n     <Segment>\n       <b>Disclaimer: Due to a lack of available datasets containing benign/malignant leisions on darker skinned patients. Experiement shall remain inconclusive.</b>\n     </Segment>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}